// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTaskManagements(t *testing.T) {
	t.Parallel()

	query := TaskManagements()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTaskManagementsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TaskManagement{}
	if err = randomize.Struct(seed, o, taskManagementDBTypes, true, taskManagementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskManagement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TaskManagements().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTaskManagementsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TaskManagement{}
	if err = randomize.Struct(seed, o, taskManagementDBTypes, true, taskManagementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskManagement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := TaskManagements().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TaskManagements().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTaskManagementsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TaskManagement{}
	if err = randomize.Struct(seed, o, taskManagementDBTypes, true, taskManagementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskManagement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TaskManagementSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TaskManagements().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTaskManagementsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TaskManagement{}
	if err = randomize.Struct(seed, o, taskManagementDBTypes, true, taskManagementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskManagement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TaskManagementExists(ctx, tx, o.TaskID)
	if err != nil {
		t.Errorf("Unable to check if TaskManagement exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TaskManagementExists to return true, but got false.")
	}
}

func testTaskManagementsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TaskManagement{}
	if err = randomize.Struct(seed, o, taskManagementDBTypes, true, taskManagementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskManagement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	taskManagementFound, err := FindTaskManagement(ctx, tx, o.TaskID)
	if err != nil {
		t.Error(err)
	}

	if taskManagementFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTaskManagementsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TaskManagement{}
	if err = randomize.Struct(seed, o, taskManagementDBTypes, true, taskManagementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskManagement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = TaskManagements().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testTaskManagementsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TaskManagement{}
	if err = randomize.Struct(seed, o, taskManagementDBTypes, true, taskManagementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskManagement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := TaskManagements().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTaskManagementsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	taskManagementOne := &TaskManagement{}
	taskManagementTwo := &TaskManagement{}
	if err = randomize.Struct(seed, taskManagementOne, taskManagementDBTypes, false, taskManagementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskManagement struct: %s", err)
	}
	if err = randomize.Struct(seed, taskManagementTwo, taskManagementDBTypes, false, taskManagementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskManagement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = taskManagementOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = taskManagementTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TaskManagements().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTaskManagementsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	taskManagementOne := &TaskManagement{}
	taskManagementTwo := &TaskManagement{}
	if err = randomize.Struct(seed, taskManagementOne, taskManagementDBTypes, false, taskManagementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskManagement struct: %s", err)
	}
	if err = randomize.Struct(seed, taskManagementTwo, taskManagementDBTypes, false, taskManagementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskManagement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = taskManagementOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = taskManagementTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TaskManagements().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func taskManagementBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *TaskManagement) error {
	*o = TaskManagement{}
	return nil
}

func taskManagementAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *TaskManagement) error {
	*o = TaskManagement{}
	return nil
}

func taskManagementAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *TaskManagement) error {
	*o = TaskManagement{}
	return nil
}

func taskManagementBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TaskManagement) error {
	*o = TaskManagement{}
	return nil
}

func taskManagementAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TaskManagement) error {
	*o = TaskManagement{}
	return nil
}

func taskManagementBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TaskManagement) error {
	*o = TaskManagement{}
	return nil
}

func taskManagementAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TaskManagement) error {
	*o = TaskManagement{}
	return nil
}

func taskManagementBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TaskManagement) error {
	*o = TaskManagement{}
	return nil
}

func taskManagementAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TaskManagement) error {
	*o = TaskManagement{}
	return nil
}

func testTaskManagementsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &TaskManagement{}
	o := &TaskManagement{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, taskManagementDBTypes, false); err != nil {
		t.Errorf("Unable to randomize TaskManagement object: %s", err)
	}

	AddTaskManagementHook(boil.BeforeInsertHook, taskManagementBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	taskManagementBeforeInsertHooks = []TaskManagementHook{}

	AddTaskManagementHook(boil.AfterInsertHook, taskManagementAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	taskManagementAfterInsertHooks = []TaskManagementHook{}

	AddTaskManagementHook(boil.AfterSelectHook, taskManagementAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	taskManagementAfterSelectHooks = []TaskManagementHook{}

	AddTaskManagementHook(boil.BeforeUpdateHook, taskManagementBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	taskManagementBeforeUpdateHooks = []TaskManagementHook{}

	AddTaskManagementHook(boil.AfterUpdateHook, taskManagementAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	taskManagementAfterUpdateHooks = []TaskManagementHook{}

	AddTaskManagementHook(boil.BeforeDeleteHook, taskManagementBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	taskManagementBeforeDeleteHooks = []TaskManagementHook{}

	AddTaskManagementHook(boil.AfterDeleteHook, taskManagementAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	taskManagementAfterDeleteHooks = []TaskManagementHook{}

	AddTaskManagementHook(boil.BeforeUpsertHook, taskManagementBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	taskManagementBeforeUpsertHooks = []TaskManagementHook{}

	AddTaskManagementHook(boil.AfterUpsertHook, taskManagementAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	taskManagementAfterUpsertHooks = []TaskManagementHook{}
}

func testTaskManagementsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TaskManagement{}
	if err = randomize.Struct(seed, o, taskManagementDBTypes, true, taskManagementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskManagement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TaskManagements().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTaskManagementsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TaskManagement{}
	if err = randomize.Struct(seed, o, taskManagementDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TaskManagement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(taskManagementColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := TaskManagements().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTaskManagementsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TaskManagement{}
	if err = randomize.Struct(seed, o, taskManagementDBTypes, true, taskManagementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskManagement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTaskManagementsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TaskManagement{}
	if err = randomize.Struct(seed, o, taskManagementDBTypes, true, taskManagementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskManagement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TaskManagementSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTaskManagementsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TaskManagement{}
	if err = randomize.Struct(seed, o, taskManagementDBTypes, true, taskManagementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskManagement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TaskManagements().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	taskManagementDBTypes = map[string]string{`TaskID`: `int`, `PersonName`: `varchar`, `TaskName`: `varchar`, `DeadlineDate`: `date`, `TaskStatus`: `enum('NO_PROCESSING','PROCESSING','DONE')`, `RegisterDatetime`: `datetime`, `UpdateDatetime`: `datetime`}
	_                     = bytes.MinRead
)

func testTaskManagementsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(taskManagementPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(taskManagementAllColumns) == len(taskManagementPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TaskManagement{}
	if err = randomize.Struct(seed, o, taskManagementDBTypes, true, taskManagementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskManagement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TaskManagements().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, taskManagementDBTypes, true, taskManagementPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TaskManagement struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTaskManagementsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(taskManagementAllColumns) == len(taskManagementPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TaskManagement{}
	if err = randomize.Struct(seed, o, taskManagementDBTypes, true, taskManagementColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaskManagement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TaskManagements().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, taskManagementDBTypes, true, taskManagementPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TaskManagement struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(taskManagementAllColumns, taskManagementPrimaryKeyColumns) {
		fields = taskManagementAllColumns
	} else {
		fields = strmangle.SetComplement(
			taskManagementAllColumns,
			taskManagementPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TaskManagementSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTaskManagementsUpsert(t *testing.T) {
	t.Parallel()

	if len(taskManagementAllColumns) == len(taskManagementPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLTaskManagementUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := TaskManagement{}
	if err = randomize.Struct(seed, &o, taskManagementDBTypes, false); err != nil {
		t.Errorf("Unable to randomize TaskManagement struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TaskManagement: %s", err)
	}

	count, err := TaskManagements().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, taskManagementDBTypes, false, taskManagementPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TaskManagement struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TaskManagement: %s", err)
	}

	count, err = TaskManagements().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
