// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TaskManagement is an object representing the database table.
type TaskManagement struct { // タスクID
	TaskID int `boil:"task_id" json:"task_id" toml:"task_id" yaml:"task_id"`
	// 担当者名
	PersonName string `boil:"person_name" json:"person_name" toml:"person_name" yaml:"person_name"`
	// タスク名
	TaskName string `boil:"task_name" json:"task_name" toml:"task_name" yaml:"task_name"`
	// 期限日
	DeadlineDate null.Time `boil:"deadline_date" json:"deadline_date,omitempty" toml:"deadline_date" yaml:"deadline_date,omitempty"`
	// ステータス(未着手/着手中/完了)
	TaskStatus string `boil:"task_status" json:"task_status" toml:"task_status" yaml:"task_status"`
	// 登録日時
	RegisterDatetime null.Time `boil:"register_datetime" json:"register_datetime,omitempty" toml:"register_datetime" yaml:"register_datetime,omitempty"`
	// 更新日時
	UpdateDatetime null.Time `boil:"update_datetime" json:"update_datetime,omitempty" toml:"update_datetime" yaml:"update_datetime,omitempty"`

	R *taskManagementR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L taskManagementL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TaskManagementColumns = struct {
	TaskID           string
	PersonName       string
	TaskName         string
	DeadlineDate     string
	TaskStatus       string
	RegisterDatetime string
	UpdateDatetime   string
}{
	TaskID:           "task_id",
	PersonName:       "person_name",
	TaskName:         "task_name",
	DeadlineDate:     "deadline_date",
	TaskStatus:       "task_status",
	RegisterDatetime: "register_datetime",
	UpdateDatetime:   "update_datetime",
}

var TaskManagementTableColumns = struct {
	TaskID           string
	PersonName       string
	TaskName         string
	DeadlineDate     string
	TaskStatus       string
	RegisterDatetime string
	UpdateDatetime   string
}{
	TaskID:           "task_management.task_id",
	PersonName:       "task_management.person_name",
	TaskName:         "task_management.task_name",
	DeadlineDate:     "task_management.deadline_date",
	TaskStatus:       "task_management.task_status",
	RegisterDatetime: "task_management.register_datetime",
	UpdateDatetime:   "task_management.update_datetime",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var TaskManagementWhere = struct {
	TaskID           whereHelperint
	PersonName       whereHelperstring
	TaskName         whereHelperstring
	DeadlineDate     whereHelpernull_Time
	TaskStatus       whereHelperstring
	RegisterDatetime whereHelpernull_Time
	UpdateDatetime   whereHelpernull_Time
}{
	TaskID:           whereHelperint{field: "`task_management`.`task_id`"},
	PersonName:       whereHelperstring{field: "`task_management`.`person_name`"},
	TaskName:         whereHelperstring{field: "`task_management`.`task_name`"},
	DeadlineDate:     whereHelpernull_Time{field: "`task_management`.`deadline_date`"},
	TaskStatus:       whereHelperstring{field: "`task_management`.`task_status`"},
	RegisterDatetime: whereHelpernull_Time{field: "`task_management`.`register_datetime`"},
	UpdateDatetime:   whereHelpernull_Time{field: "`task_management`.`update_datetime`"},
}

// TaskManagementRels is where relationship names are stored.
var TaskManagementRels = struct {
}{}

// taskManagementR is where relationships are stored.
type taskManagementR struct {
}

// NewStruct creates a new relationship struct
func (*taskManagementR) NewStruct() *taskManagementR {
	return &taskManagementR{}
}

// taskManagementL is where Load methods for each relationship are stored.
type taskManagementL struct{}

var (
	taskManagementAllColumns            = []string{"task_id", "person_name", "task_name", "deadline_date", "task_status", "register_datetime", "update_datetime"}
	taskManagementColumnsWithoutDefault = []string{"person_name", "task_name", "deadline_date", "register_datetime", "update_datetime"}
	taskManagementColumnsWithDefault    = []string{"task_id", "task_status"}
	taskManagementPrimaryKeyColumns     = []string{"task_id"}
	taskManagementGeneratedColumns      = []string{}
)

type (
	// TaskManagementSlice is an alias for a slice of pointers to TaskManagement.
	// This should almost always be used instead of []TaskManagement.
	TaskManagementSlice []*TaskManagement
	// TaskManagementHook is the signature for custom TaskManagement hook methods
	TaskManagementHook func(context.Context, boil.ContextExecutor, *TaskManagement) error

	taskManagementQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	taskManagementType                 = reflect.TypeOf(&TaskManagement{})
	taskManagementMapping              = queries.MakeStructMapping(taskManagementType)
	taskManagementPrimaryKeyMapping, _ = queries.BindMapping(taskManagementType, taskManagementMapping, taskManagementPrimaryKeyColumns)
	taskManagementInsertCacheMut       sync.RWMutex
	taskManagementInsertCache          = make(map[string]insertCache)
	taskManagementUpdateCacheMut       sync.RWMutex
	taskManagementUpdateCache          = make(map[string]updateCache)
	taskManagementUpsertCacheMut       sync.RWMutex
	taskManagementUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var taskManagementAfterSelectHooks []TaskManagementHook

var taskManagementBeforeInsertHooks []TaskManagementHook
var taskManagementAfterInsertHooks []TaskManagementHook

var taskManagementBeforeUpdateHooks []TaskManagementHook
var taskManagementAfterUpdateHooks []TaskManagementHook

var taskManagementBeforeDeleteHooks []TaskManagementHook
var taskManagementAfterDeleteHooks []TaskManagementHook

var taskManagementBeforeUpsertHooks []TaskManagementHook
var taskManagementAfterUpsertHooks []TaskManagementHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TaskManagement) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range taskManagementAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TaskManagement) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range taskManagementBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TaskManagement) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range taskManagementAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TaskManagement) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range taskManagementBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TaskManagement) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range taskManagementAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TaskManagement) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range taskManagementBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TaskManagement) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range taskManagementAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TaskManagement) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range taskManagementBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TaskManagement) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range taskManagementAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTaskManagementHook registers your hook function for all future operations.
func AddTaskManagementHook(hookPoint boil.HookPoint, taskManagementHook TaskManagementHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		taskManagementAfterSelectHooks = append(taskManagementAfterSelectHooks, taskManagementHook)
	case boil.BeforeInsertHook:
		taskManagementBeforeInsertHooks = append(taskManagementBeforeInsertHooks, taskManagementHook)
	case boil.AfterInsertHook:
		taskManagementAfterInsertHooks = append(taskManagementAfterInsertHooks, taskManagementHook)
	case boil.BeforeUpdateHook:
		taskManagementBeforeUpdateHooks = append(taskManagementBeforeUpdateHooks, taskManagementHook)
	case boil.AfterUpdateHook:
		taskManagementAfterUpdateHooks = append(taskManagementAfterUpdateHooks, taskManagementHook)
	case boil.BeforeDeleteHook:
		taskManagementBeforeDeleteHooks = append(taskManagementBeforeDeleteHooks, taskManagementHook)
	case boil.AfterDeleteHook:
		taskManagementAfterDeleteHooks = append(taskManagementAfterDeleteHooks, taskManagementHook)
	case boil.BeforeUpsertHook:
		taskManagementBeforeUpsertHooks = append(taskManagementBeforeUpsertHooks, taskManagementHook)
	case boil.AfterUpsertHook:
		taskManagementAfterUpsertHooks = append(taskManagementAfterUpsertHooks, taskManagementHook)
	}
}

// One returns a single taskManagement record from the query.
func (q taskManagementQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TaskManagement, error) {
	o := &TaskManagement{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for task_management")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TaskManagement records from the query.
func (q taskManagementQuery) All(ctx context.Context, exec boil.ContextExecutor) (TaskManagementSlice, error) {
	var o []*TaskManagement

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to TaskManagement slice")
	}

	if len(taskManagementAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TaskManagement records in the query.
func (q taskManagementQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count task_management rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q taskManagementQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if task_management exists")
	}

	return count > 0, nil
}

// TaskManagements retrieves all the records using an executor.
func TaskManagements(mods ...qm.QueryMod) taskManagementQuery {
	mods = append(mods, qm.From("`task_management`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`task_management`.*"})
	}

	return taskManagementQuery{q}
}

// FindTaskManagement retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTaskManagement(ctx context.Context, exec boil.ContextExecutor, taskID int, selectCols ...string) (*TaskManagement, error) {
	taskManagementObj := &TaskManagement{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `task_management` where `task_id`=?", sel,
	)

	q := queries.Raw(query, taskID)

	err := q.Bind(ctx, exec, taskManagementObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from task_management")
	}

	if err = taskManagementObj.doAfterSelectHooks(ctx, exec); err != nil {
		return taskManagementObj, err
	}

	return taskManagementObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TaskManagement) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no task_management provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(taskManagementColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	taskManagementInsertCacheMut.RLock()
	cache, cached := taskManagementInsertCache[key]
	taskManagementInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			taskManagementAllColumns,
			taskManagementColumnsWithDefault,
			taskManagementColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(taskManagementType, taskManagementMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(taskManagementType, taskManagementMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `task_management` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `task_management` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `task_management` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, taskManagementPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into task_management")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.TaskID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == taskManagementMapping["task_id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.TaskID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for task_management")
	}

CacheNoHooks:
	if !cached {
		taskManagementInsertCacheMut.Lock()
		taskManagementInsertCache[key] = cache
		taskManagementInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TaskManagement.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TaskManagement) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	taskManagementUpdateCacheMut.RLock()
	cache, cached := taskManagementUpdateCache[key]
	taskManagementUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			taskManagementAllColumns,
			taskManagementPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update task_management, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `task_management` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, taskManagementPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(taskManagementType, taskManagementMapping, append(wl, taskManagementPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update task_management row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for task_management")
	}

	if !cached {
		taskManagementUpdateCacheMut.Lock()
		taskManagementUpdateCache[key] = cache
		taskManagementUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q taskManagementQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for task_management")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for task_management")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TaskManagementSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), taskManagementPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `task_management` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, taskManagementPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in taskManagement slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all taskManagement")
	}
	return rowsAff, nil
}

var mySQLTaskManagementUniqueColumns = []string{
	"task_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TaskManagement) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no task_management provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(taskManagementColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLTaskManagementUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	taskManagementUpsertCacheMut.RLock()
	cache, cached := taskManagementUpsertCache[key]
	taskManagementUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			taskManagementAllColumns,
			taskManagementColumnsWithDefault,
			taskManagementColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			taskManagementAllColumns,
			taskManagementPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("model: unable to upsert task_management, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`task_management`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `task_management` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(taskManagementType, taskManagementMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(taskManagementType, taskManagementMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for task_management")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.TaskID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == taskManagementMapping["task_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(taskManagementType, taskManagementMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "model: unable to retrieve unique values for task_management")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for task_management")
	}

CacheNoHooks:
	if !cached {
		taskManagementUpsertCacheMut.Lock()
		taskManagementUpsertCache[key] = cache
		taskManagementUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TaskManagement record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TaskManagement) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no TaskManagement provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), taskManagementPrimaryKeyMapping)
	sql := "DELETE FROM `task_management` WHERE `task_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from task_management")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for task_management")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q taskManagementQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no taskManagementQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from task_management")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for task_management")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TaskManagementSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(taskManagementBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), taskManagementPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `task_management` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, taskManagementPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from taskManagement slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for task_management")
	}

	if len(taskManagementAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TaskManagement) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTaskManagement(ctx, exec, o.TaskID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TaskManagementSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TaskManagementSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), taskManagementPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `task_management`.* FROM `task_management` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, taskManagementPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in TaskManagementSlice")
	}

	*o = slice

	return nil
}

// TaskManagementExists checks if the TaskManagement row exists.
func TaskManagementExists(ctx context.Context, exec boil.ContextExecutor, taskID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `task_management` where `task_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, taskID)
	}
	row := exec.QueryRowContext(ctx, sql, taskID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if task_management exists")
	}

	return exists, nil
}
